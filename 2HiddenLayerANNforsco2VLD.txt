function [y1] = TwolayerANN(x1)
%TWOLAYERANN neural network simulation function.
%
% Auto-generated by MATLAB, 18-Feb-2024 14:48:11.
% 
% [y1] = TwolayerANN(x1) takes these arguments:
%   x = 7xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.
 
%#ok<*RPMT0>
% The input row matrix x1 to this ANN are normalized values
 
% [pin_norm,Tin_norm,cin_norm,alpha_in_norm,r_in_norm,r_out_norm,b_norm]
% The normalization is done as follows
% pin_norm=(p_in (in bars) - 133.01)/48.98
% Tin_norm=(T_in (in Celsius) - 100.05)/19.87;
% cin_norm=(cin (in m/s) - 130.19)/59.29;
% alpha_in_norm=(alpha_in (in degrees) - 7.81)/24.84;
% r_in_norm=(r_in (in mm) - 20.14)/39.84;
% R_out_norm=(r_out (in mm) - 24.14)/109.89;
% b_norm = (b (in mm) - 1.52)/2.47;
 
% The output that this function provides is a normalized value of the skin
% friction coefficient. This value has to be multiplied by 0.0061 and a
% value of 0.00194 must be added to the product to get the correct skin
% friction coefficient value
 
 
% ===== NEURAL NETWORK CONSTANTS =====
 
% Input 1
x1_step1.xoffset = [0;0;0;0;0;0;0];
x1_step1.gain = [2;2;2;2;2;2;2];
x1_step1.ymin = -1;
 
% Layer 1
b1 = [-2.4846485742975721323;-1.7188416688022216672;0.90253312905904270469;-0.1701779711980695442;0.79736717811207225015;0.9074313958015671755;0.34634108579290712182;-1.6756483149688694567;-2.1088109607320348893;2.0073833161937386649];
IW1_1 = [1.0030670849667024935 -0.47897248433748018659 0.51905574812561383613 0.57424373223903613095 -0.60836989809145536334 0.71349994509329750514 0.27518188763787670981;0.21372026743134600602 -0.84033363827760021447 0.34866960347228104222 -0.85120163990576458435 -1.1387265742579191219 0.49866984033521100095 -0.46735744750883218002;-0.70077963397063069984 0.43435354806186332599 0.16767813289271929489 0.26774883319342418497 1.0244833036932898818 -1.2261185166709647199 -1.067096023632592372;0.55132487545558794828 -0.086574157489725633852 0.9978537550567095904 -1.4046545620916517372 -1.5790595674906464652 -1.4207280738059386849 0.43363919595668221074;-0.47604667477410733678 0.18869039454293223823 0.35218107028238954115 0.54000061729093074003 0.76794490655689062741 0.96904744977481260815 -0.12350669471230810159;1.0863039870771800111 0.40306828827203888821 0.36397142742118632208 0.21666935439666867858 0.87584108203892530042 -0.76865215570719591653 0.46332567539689190061;0.62018303473766300815 0.45713090481587653757 1.05379321564738615 0.41326158608092866675 -1.3328390998252614974 -0.77353601209807365535 -1.8277000506111547029;-0.35903147767982895866 -0.2964288387792342605 -0.55473262708029569268 0.48149528470350472231 0.96838002764274777601 0.8490666929159904619 -0.29995517516110320466;-0.35596485560127216763 -0.16966391169312791676 0.20717472461613378742 -0.81415477284445869621 0.78045021589521668126 -1.3171304793139422262 0.11336793704628420065;1.2368843447952388992 0.20465307139774152612 -0.085610380719125911408 -0.030920686468825335502 1.0833875049965429049 0.57684120120455328884 1.0021484837731744477];
 
% Layer 2
b2 = [1.7920803721117324336;-1.4991244845129834129;0.54685866420925466347;0.26323962564816466569;0.21454942187270731324;-0.34052204521332307685;-1.4204518343245344791;1.8418160527858780107];
LW2_1 = [-0.12849001184985181512 -0.69311659250233104146 0.76502156709951707469 0.69589611583007227047 0.17859659705127989282 0.29651363736888342038 -0.38737102190093569698 0.70799512948168041859 0.24366207263672759464 0.6950520612209423188;0.73333315458005776666 -0.26434155840566864182 -0.92383902105201221033 0.16914334520755033853 -0.13603198842298241944 -0.48754209494647016143 0.47316470922128250898 0.50464082111026109523 0.81455754096050736468 0.27199290718320973115;-0.59109161396183074189 0.74956239528410661954 0.59724735192206424017 -0.67703601132634116944 -0.32620651998706723385 0.14171122430794166891 -0.23686257957185155587 0.55610412020280441947 -0.22587694604418118161 0.57691220390015773845;0.027158570070850186762 -0.26355104958998132325 -0.35221699893942515214 -0.099586644545965372077 -0.94378169455920835063 0.62726996851200689242 -1.0840725557331662987 -0.88433659324117552814 0.19110142571843966031 0.44232788142029444423;0.76434024214741302927 1.2018382884016798329 -0.40620858617592736639 0.88717122599573161601 -0.4750103047971381276 -0.071487968361645753967 0.15079458107937088185 0.12623497158911317628 0.20936507636715534497 0.12798850825341842596;-0.66279359897266398871 -0.26557965339728173415 -0.62765189608715421521 -0.2247913649307566597 0.25117003525965386768 -0.81031690150876289902 0.33552393707496730446 -0.10996474712863016365 -0.75744792345983813497 -0.17292905406790703982;-0.47374671654217004324 -0.089979391960608307022 0.57709572212378701384 -0.095751237738459421545 -1.1613925244325924435 0.65658235263643127677 1.0867294610343924965 0.93598486591601992579 0.48016269265795463728 -1.1913680778638731095;0.62352770747844465937 -0.31078289876364934008 0.7907870246142382209 0.33703518413016159139 -0.46955426107180020523 -0.42450850351007285433 -0.71775440578779048373 -0.098332342444774914481 -0.0034420931660482300893 0.72018471448847831695];
 
% Layer 3
b3 = -0.61615274634447070312;
LW3_2 = [0.25882007060722589387 -0.16370302272553710621 -0.99112126713484460794 0.5084947056521168518 1.1287190599386223155 0.82716689748298743989 -1.0427920295536836637 -0.092181110650015940511];
 
% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.00486590779665;
y1_step1.xoffset = -0.000264426;
 
% ===== SIMULATION ========
 
% Dimensions
Q = size(x1,2); % samples
 
% Input 1
xp1 = mapminmax_apply(x1,x1_step1);
 
% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
 
% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
 
% Layer 3
a3 = repmat(b3,1,Q) + LW3_2*a2;
 
% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
end
 
% ===== MODULE FUNCTIONS ========
 
% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end
 
% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
 
% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
